import"./modulepreload-polyfill-B5Qt9EMX.js";class i{constructor(){console.log("AgentInfoPage constructor called"),this.agentData=null,this.isAdmin=!1,this.originalPrompt="",this.initializeAuth(),this.initializeEventListeners(),this.loadAgentInfo()}async initializeAuth(){try{const t=localStorage.getItem("authenticated"),o=localStorage.getItem("accessToken");if(!t||!o){window.location.href="/login.html";return}const e=await fetch("/auth/check",{method:"GET",headers:{Authorization:`Bearer ${o}`}});if(!e.ok){localStorage.clear(),window.location.href="/login.html";return}const r=await e.json();this.loadUserData(r.user)}catch(t){console.error("Auth check failed:",t),localStorage.clear(),window.location.href="/login.html"}}initializeEventListeners(){var t,o;document.getElementById("dashboardBtn").addEventListener("click",e=>{e.preventDefault(),window.location.href="/index.html"}),document.getElementById("logoutBtn").addEventListener("click",e=>{e.preventDefault(),this.handleLogout()}),document.getElementById("pastAnalysisBtn").addEventListener("click",e=>{e.preventDefault(),window.location.href="/past-conversations.html"}),document.getElementById("startRecordingBtn").addEventListener("click",()=>{console.log("Start Recording button clicked"),this.startRecording()}),document.querySelectorAll(".tab").forEach(e=>{e.addEventListener("click",()=>{this.switchTab(e.dataset.tab)})}),(t=document.getElementById("savePromptBtn"))==null||t.addEventListener("click",()=>{this.savePrompt()}),(o=document.getElementById("resetPromptBtn"))==null||o.addEventListener("click",()=>{this.resetPrompt()})}loadUserData(t){const o=t.email||"User",e=`${t.first_name||""} ${t.last_name||""}`.trim()||o.split("@")[0],r=e.substring(0,2).toUpperCase();document.getElementById("userName").textContent=e,document.getElementById("userAvatar").textContent=r;const n=t.role||localStorage.getItem("userRole"),a=document.getElementById("promptTab"),s=document.getElementById("usersBtn");n==="admin"?(this.isAdmin=!0,a.style.display="block",s.style.display="flex",console.log("Admin user detected, showing admin features")):(this.isAdmin=!1,a.style.display="none",s.style.display="none",console.log("Regular user, hiding admin features"))}async loadAgentInfo(){const t=localStorage.getItem("selectedAgentType");if(console.log("Loading agent info for type:",t),!t){console.log("No agent type found, redirecting to index"),window.location.href="/index.html";return}try{const o=localStorage.getItem("accessToken");if(!o){console.error("No access token found"),window.location.href="/login.html";return}const e=await fetch("/api/db/get_agent_by_key",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${o}`},body:JSON.stringify({agent_key:t})});if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const r=await e.json();if(!r.success||!r.agent){console.error("Failed to load agent:",r.error),window.location.href="/index.html";return}const n=r.agent;console.log("Agent data:",n),document.title=n.title,document.getElementById("agentTitle").textContent=n.title,document.getElementById("breadcrumbTitle").textContent=n.title,document.getElementById("roleplayType").textContent=n.type,document.getElementById("guidelinesText").textContent=n.guidelines;const a=document.getElementById("roleplayIcon");a&&(a.innerHTML=n.icon,a.className=`info-icon ${n.iconClass}`),this.isAdmin&&this.loadAgentPrompt(n.agent_key)}catch(o){console.error("Error loading agent from API:",o),this.showError("Failed to load agent information. Please try again later.")}}showError(t){const o=document.querySelector(".main-content");o&&(o.innerHTML=`
                    <div class="error-container" style="text-align: center; padding: 60px 20px; color: #ef4444;">
                        <div class="material-icons" style="font-size: 64px; margin-bottom: 24px;">error_outline</div>
                        <h1 style="font-size: 24px; margin-bottom: 16px; color: #1e293b;">Error Loading Agent</h1>
                        <p style="font-size: 16px; margin-bottom: 24px; color: #64748b;">${t}</p>
                        <div style="display: flex; gap: 12px; justify-content: center;">
                            <button onclick="location.reload()" style="padding: 12px 24px; background: #3b82f6; color: white; border: none; border-radius: 8px; cursor: pointer; font-weight: 500;">
                                Try Again
                            </button>
                            <button onclick="window.location.href='/index.html'" style="padding: 12px 24px; background: #f1f5f9; color: #64748b; border: 1px solid #e2e8f0; border-radius: 8px; cursor: pointer; font-weight: 500;">
                                Back to Dashboard
                            </button>
                        </div>
                    </div>
                `)}startRecording(){console.log("Starting recording...");const t=localStorage.getItem("selectedAgentType");t?(console.log("Redirecting to conversation page with agent type:",t),window.location.href="/conversation.html"):(console.log("No agent type found, redirecting to index"),window.location.href="/index.html")}async handleLogout(){try{localStorage.removeItem("authenticated"),localStorage.removeItem("userEmail"),localStorage.removeItem("userName"),localStorage.removeItem("accessToken"),window.location.href="/login.html"}catch(t){console.error("Logout failed:",t),window.location.href="/login.html"}}switchTab(t){document.querySelectorAll(".tab").forEach(o=>{o.classList.remove("active")}),document.querySelector(`[data-tab="${t}"]`).classList.add("active"),document.querySelectorAll(".tab-content").forEach(o=>{o.classList.remove("active")}),document.getElementById(`${t}Content`).classList.add("active")}async loadAgentPrompt(t){try{const o=localStorage.getItem("accessToken"),e=await fetch("/api/db/get_agent_with_prompt",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${o}`},body:JSON.stringify({agent_key:t})});if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const r=await e.json();if(r.success&&r.agent){const n=document.getElementById("promptTextarea");this.originalPrompt=r.agent.prompt||"",n.value=this.originalPrompt,console.log("Loaded agent prompt:",this.originalPrompt)}else throw new Error(r.error||"Failed to load agent prompt")}catch(o){console.error("Error loading agent prompt:",o),this.showPromptStatus("Error loading prompt: "+o.message,"error")}}async savePrompt(){const o=document.getElementById("promptTextarea").value.trim();if(!o){this.showPromptStatus("Prompt cannot be empty","error");return}try{const e=localStorage.getItem("accessToken"),r=localStorage.getItem("selectedAgentType"),n=await fetch("/api/db/update_agent_prompt",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e}`},body:JSON.stringify({agent_key:r,prompt:o})});if(!n.ok)throw new Error(`HTTP error! status: ${n.status}`);const a=await n.json();if(a.success)this.originalPrompt=o,this.showPromptStatus("Prompt updated successfully","success");else throw new Error(a.error||"Failed to update prompt")}catch(e){console.error("Error updating prompt:",e),this.showPromptStatus("Error updating prompt: "+e.message,"error")}}resetPrompt(){const t=document.getElementById("promptTextarea");t.value=this.originalPrompt,this.showPromptStatus("Prompt reset to original","success")}showPromptStatus(t,o="success"){const e=document.getElementById("promptStatus");e.textContent=t,e.className=`status-message ${o}`,e.style.display="block",setTimeout(()=>{e.style.display="none"},5e3)}}document.addEventListener("DOMContentLoaded",function(){console.log("DOM loaded, initializing AgentInfoPage"),new i});
