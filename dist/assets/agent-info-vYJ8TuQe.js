import"./modulepreload-polyfill-B5Qt9EMX.js";class i{constructor(){this.agentData=null,this.isAdmin=!1,this.originalPrompt="",this.initializeAuth(),this.initializeEventListeners(),this.loadAgentInfo()}async initializeAuth(){try{const o=localStorage.getItem("authenticated"),e=localStorage.getItem("accessToken");if(!o||!e){window.location.href="/login.html";return}const t=await fetch("/auth/check",{method:"GET",headers:{Authorization:`Bearer ${e}`}});if(!t.ok){localStorage.clear(),window.location.href="/login.html";return}const r=await t.json();this.loadUserData(r.user)}catch(o){console.error("Auth check failed:",o),localStorage.clear(),window.location.href="/login.html"}}initializeEventListeners(){var o,e;document.getElementById("dashboardBtn").addEventListener("click",t=>{t.preventDefault(),window.location.href="/index.html"}),document.getElementById("logoutBtn").addEventListener("click",t=>{t.preventDefault(),this.handleLogout()}),document.getElementById("pastAnalysisBtn").addEventListener("click",t=>{t.preventDefault(),window.location.href="/past-conversations.html"}),document.getElementById("startRecordingBtn").addEventListener("click",()=>{this.startRecording()}),document.querySelectorAll(".tab").forEach(t=>{t.addEventListener("click",()=>{this.switchTab(t.dataset.tab)})}),(o=document.getElementById("savePromptBtn"))==null||o.addEventListener("click",()=>{this.savePrompt()}),(e=document.getElementById("resetPromptBtn"))==null||e.addEventListener("click",()=>{this.resetPrompt()})}loadUserData(o){const e=o.email||"User",t=`${o.first_name||""} ${o.last_name||""}`.trim()||e.split("@")[0],r=t.substring(0,2).toUpperCase();document.getElementById("userName").textContent=t,document.getElementById("userAvatar").textContent=r;const n=o.role||localStorage.getItem("userRole"),a=document.getElementById("promptTab"),s=document.getElementById("usersBtn");n==="admin"?(this.isAdmin=!0,a.style.display="block",s.style.display="flex"):(this.isAdmin=!1,a.style.display="none",s.style.display="none")}async loadAgentInfo(){const o=localStorage.getItem("selectedAgentType");if(!o){window.location.href="/index.html";return}try{const e=localStorage.getItem("accessToken");if(!e){console.error("No access token found"),window.location.href="/login.html";return}const t=await fetch("/api/db/get_agent_by_key",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e}`},body:JSON.stringify({agent_key:o})});if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const r=await t.json();if(!r.success||!r.agent){console.error("Failed to load agent:",r.error),window.location.href="/index.html";return}const n=r.agent;document.title=n.title,document.getElementById("agentTitle").textContent=n.title,document.getElementById("breadcrumbTitle").textContent=n.title,document.getElementById("roleplayType").textContent=n.type,document.getElementById("guidelinesText").textContent=n.guidelines;const a=document.getElementById("roleplayIcon");a&&(a.innerHTML=n.icon,a.className=`info-icon ${n.iconClass}`),this.isAdmin&&this.loadAgentPrompt(n.agent_key)}catch(e){console.error("Error loading agent from API:",e),this.showError("Failed to load agent information. Please try again later.")}}showError(o){const e=document.querySelector(".main-content");e&&(e.innerHTML=`
                    <div class="error-container" style="text-align: center; padding: 60px 20px; color: #ef4444;">
                        <div class="material-icons" style="font-size: 64px; margin-bottom: 24px;">error_outline</div>
                        <h1 style="font-size: 24px; margin-bottom: 16px; color: #1e293b;">Error Loading Agent</h1>
                        <p style="font-size: 16px; margin-bottom: 24px; color: #64748b;">${o}</p>
                        <div style="display: flex; gap: 12px; justify-content: center;">
                            <button onclick="location.reload()" style="padding: 12px 24px; background: #3b82f6; color: white; border: none; border-radius: 8px; cursor: pointer; font-weight: 500;">
                                Try Again
                            </button>
                            <button onclick="window.location.href='/index.html'" style="padding: 12px 24px; background: #f1f5f9; color: #64748b; border: 1px solid #e2e8f0; border-radius: 8px; cursor: pointer; font-weight: 500;">
                                Back to Dashboard
                            </button>
                        </div>
                    </div>
                `)}startRecording(){localStorage.getItem("selectedAgentType")?window.location.href="/conversation.html":window.location.href="/index.html"}async handleLogout(){try{localStorage.removeItem("authenticated"),localStorage.removeItem("userEmail"),localStorage.removeItem("userName"),localStorage.removeItem("accessToken"),window.location.href="/login.html"}catch(o){console.error("Logout failed:",o),window.location.href="/login.html"}}switchTab(o){document.querySelectorAll(".tab").forEach(e=>{e.classList.remove("active")}),document.querySelector(`[data-tab="${o}"]`).classList.add("active"),document.querySelectorAll(".tab-content").forEach(e=>{e.classList.remove("active")}),document.getElementById(`${o}Content`).classList.add("active")}async loadAgentPrompt(o){try{const e=localStorage.getItem("accessToken"),t=await fetch("/api/db/get_agent_with_prompt",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e}`},body:JSON.stringify({agent_key:o})});if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const r=await t.json();if(r.success&&r.agent){const n=document.getElementById("promptTextarea");this.originalPrompt=r.agent.prompt||"",n.value=this.originalPrompt}else throw new Error(r.error||"Failed to load agent prompt")}catch(e){console.error("Error loading agent prompt:",e),this.showPromptStatus("Error loading prompt: "+e.message,"error")}}async savePrompt(){const e=document.getElementById("promptTextarea").value.trim();if(!e){this.showPromptStatus("Prompt cannot be empty","error");return}try{const t=localStorage.getItem("accessToken"),r=localStorage.getItem("selectedAgentType"),n=await fetch("/api/db/update_agent_prompt",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t}`},body:JSON.stringify({agent_key:r,prompt:e})});if(!n.ok)throw new Error(`HTTP error! status: ${n.status}`);const a=await n.json();if(a.success)this.originalPrompt=e,this.showPromptStatus("Prompt updated successfully","success");else throw new Error(a.error||"Failed to update prompt")}catch(t){console.error("Error updating prompt:",t),this.showPromptStatus("Error updating prompt: "+t.message,"error")}}resetPrompt(){const o=document.getElementById("promptTextarea");o.value=this.originalPrompt,this.showPromptStatus("Prompt reset to original","success")}showPromptStatus(o,e="success"){const t=document.getElementById("promptStatus");t.textContent=o,t.className=`status-message ${e}`,t.style.display="block",setTimeout(()=>{t.style.display="none"},5e3)}}document.addEventListener("DOMContentLoaded",function(){new i});
