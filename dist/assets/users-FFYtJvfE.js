import"./modulepreload-polyfill-B5Qt9EMX.js";class l{constructor(){this.allUsers=[],this.initializeAuth(),this.initializeEventListeners(),this.loadStats(),this.loadUsers()}async initializeAuth(){try{const e=localStorage.getItem("authenticated"),s=localStorage.getItem("accessToken");if(!e||!s){window.location.href="/login.html";return}const t=await fetch("/auth/check",{method:"GET",headers:{Authorization:`Bearer ${s}`}});if(!t.ok){localStorage.clear(),window.location.href="/login.html";return}const a=await t.json();this.loadUserData(a.user)}catch(e){console.error("Auth check failed:",e),localStorage.clear(),window.location.href="/login.html"}}initializeEventListeners(){document.getElementById("dashboardBtn").addEventListener("click",e=>{e.preventDefault(),window.location.href="/index.html"}),document.getElementById("logoutBtn").addEventListener("click",e=>{e.preventDefault(),this.handleLogout()}),document.getElementById("pastAnalysisBtn").addEventListener("click",e=>{e.preventDefault(),window.location.href="/past-conversations.html"}),document.getElementById("dateFilter").addEventListener("change",e=>{this.filterUsersByDate(e.target.value)}),document.getElementById("createUserBtn").addEventListener("click",()=>{this.openCreateUserModal()}),document.getElementById("closeModal").addEventListener("click",()=>{this.closeCreateUserModal()}),document.getElementById("cancelBtn").addEventListener("click",()=>{this.closeCreateUserModal()}),document.getElementById("createUserModal").addEventListener("click",e=>{e.target.id==="createUserModal"&&this.closeCreateUserModal()}),document.getElementById("createUserForm").addEventListener("submit",e=>{e.preventDefault(),this.handleCreateUser()})}loadUserData(e){const s=e.email||"User",t=`${e.first_name||""} ${e.last_name||""}`.trim()||s.split("@")[0],a=t.substring(0,2).toUpperCase();if(document.getElementById("userName").textContent=t,document.getElementById("userAvatar").textContent=a,(e.role||localStorage.getItem("userRole"))!=="admin"){this.showStatus("Access denied. Admin privileges required.","error"),setTimeout(()=>{window.location.href="/index.html"},2e3);return}}async getAccessToken(){const e=localStorage.getItem("accessToken");return e||(window.location.href="/login.html","")}async loadStats(){try{const e=await this.getAccessToken(),s=await fetch("/api/db/users/stats",{method:"GET",headers:{Authorization:`Bearer ${e}`}});if(!s.ok)throw new Error(`HTTP error! status: ${s.status}`);const t=await s.json();if(t.success){const a=t.stats;document.getElementById("totalUsers").textContent=a.total_users,document.getElementById("activeUsers").textContent=a.active_users,document.getElementById("adminUsers").textContent=a.admin_users,document.getElementById("regularUsers").textContent=a.regular_users}else throw new Error(t.error||"Failed to load stats")}catch(e){console.error("Error loading stats:",e),this.showStatus("Error loading statistics: "+e.message,"error")}}async loadUsers(){try{const e=await this.getAccessToken(),s=await fetch("/api/db/users/get_all",{method:"GET",headers:{Authorization:`Bearer ${e}`}});if(!s.ok)throw new Error(`HTTP error! status: ${s.status}`);const t=await s.json();if(t.success)this.allUsers=t.users,this.renderUsersTable(this.allUsers);else throw new Error(t.error||"Failed to load users")}catch(e){console.error("Error loading users:",e),this.showStatus("Error loading users: "+e.message,"error")}}filterUsersByDate(e){if(!this.allUsers||this.allUsers.length===0)return;let s=[...this.allUsers];const t=new Date;switch(e){case"today":s=s.filter(r=>new Date(r.created_at).toDateString()===t.toDateString());break;case"week":const a=new Date(t.getTime()-7*24*60*60*1e3);s=s.filter(r=>new Date(r.created_at)>=a);break;case"month":const o=new Date(t.getTime()-30*24*60*60*1e3);s=s.filter(r=>new Date(r.created_at)>=o);break}s.sort((a,o)=>new Date(o.created_at)-new Date(a.created_at)),this.renderUsersTable(s)}renderUsersTable(e){const s=document.getElementById("usersTableBody");if(document.getElementById("usersCount").textContent=e.length,e.length===0){s.innerHTML=`
                        <tr>
                            <td colspan="6" style="text-align: center; padding: 60px 20px;">
                                <div style="display: flex; flex-direction: column; align-items: center; gap: 12px;">
                                    <span class="material-icons" style="font-size: 48px; color: #cbd5e1;">person_off</span>
                                    <div style="color: #64748b; font-size: 16px; font-weight: 500;">No users found</div>
                                    <div style="color: #94a3b8; font-size: 14px;">Try adjusting your filters or create a new user</div>
                                </div>
                            </td>
                        </tr>
                    `;return}s.innerHTML=e.map(t=>`
                    <tr>
                        <td>
                            <div style="display: flex; align-items: center; gap: 12px;">
                                
                                <div>
                                    <strong>${t.first_name||""} ${t.last_name||""}</strong>
                                    ${!t.first_name&&!t.last_name?'<em style="color: #94a3b8;">No name</em>':""}
                                </div>
                            </div>
                        </td>
                        <td>${t.email}</td>
                        <td>
                            <span class="role-badge role-${t.role}">
                                ${t.role}
                            </span>
                        </td>
                        <td>
                            <span class="status-badge status-${t.is_active?"active":"inactive"}">
                                ${t.is_active?"Active":"Inactive"}
                            </span>
                        </td>
                        <td style="color: #64748b;">
                            ${t.last_login?new Date(t.last_login).toLocaleDateString("en-US",{month:"short",day:"numeric",year:"numeric"}):"Never"}
                        </td>
                        <td style="color: #64748b;">
                            ${new Date(t.created_at).toLocaleDateString("en-US",{month:"short",day:"numeric",year:"numeric"})}
                        </td>
                    </tr>
                `).join("")}showStatus(e,s="success"){const t=document.createElement("div");t.className=`status ${s}`,t.textContent=e,t.style.position="fixed",t.style.top="20px",t.style.right="20px",t.style.zIndex="10000",t.style.display="block",t.style.minWidth="300px",document.body.appendChild(t),setTimeout(()=>{t.remove()},5e3)}openCreateUserModal(){document.getElementById("createUserModal").style.display="block",document.getElementById("firstName").focus()}closeCreateUserModal(){document.getElementById("createUserModal").style.display="none",document.getElementById("createUserForm").reset()}async handleCreateUser(){try{const e=document.getElementById("createUserForm"),s=new FormData(e),t={first_name:s.get("firstName"),last_name:s.get("lastName"),email:s.get("email"),password:s.get("password"),role:s.get("role")};if(!t.first_name||!t.last_name||!t.email||!t.password||!t.role){this.showStatus("Please fill in all required fields","error");return}const a=document.getElementById("submitBtn"),o=a.textContent;a.disabled=!0,a.textContent="Creating...";const r=await this.getAccessToken(),i=await(await fetch("/api/db/users/create",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${r}`},body:JSON.stringify(t)})).json();i.success?(this.showStatus("User created successfully!","success"),this.closeCreateUserModal(),await this.loadUsers(),await this.loadStats()):this.showStatus(i.error||"Failed to create user","error"),a.disabled=!1,a.textContent=o}catch(e){console.error("Error creating user:",e),this.showStatus("Error creating user: "+e.message,"error");const s=document.getElementById("submitBtn");s.disabled=!1,s.textContent="Create User"}}async handleLogout(){try{localStorage.removeItem("authenticated"),localStorage.removeItem("userEmail"),localStorage.removeItem("userName"),localStorage.removeItem("accessToken"),window.location.href="/login.html"}catch(e){console.error("Logout failed:",e),window.location.href="/login.html"}}}document.addEventListener("DOMContentLoaded",function(){new l});
