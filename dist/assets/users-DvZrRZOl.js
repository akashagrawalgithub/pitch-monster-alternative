import"./modulepreload-polyfill-B5Qt9EMX.js";class i{constructor(){this.initializeAuth(),this.initializeEventListeners(),this.loadStats(),this.loadUsers()}async initializeAuth(){try{const t=localStorage.getItem("authenticated"),s=localStorage.getItem("accessToken");if(!t||!s){window.location.href="/login.html";return}const e=await fetch("/auth/check",{method:"GET",headers:{Authorization:`Bearer ${s}`}});if(!e.ok){localStorage.clear(),window.location.href="/login.html";return}const a=await e.json();this.loadUserData(a.user)}catch(t){console.error("Auth check failed:",t),localStorage.clear(),window.location.href="/login.html"}}initializeEventListeners(){document.getElementById("dashboardBtn").addEventListener("click",t=>{t.preventDefault(),window.location.href="/index.html"}),document.getElementById("logoutBtn").addEventListener("click",t=>{t.preventDefault(),this.handleLogout()}),document.getElementById("pastAnalysisBtn").addEventListener("click",t=>{t.preventDefault(),window.location.href="/past-conversations.html"}),document.getElementById("createUserBtn").addEventListener("click",()=>{this.openCreateUserModal()}),document.getElementById("closeModal").addEventListener("click",()=>{this.closeCreateUserModal()}),document.getElementById("cancelBtn").addEventListener("click",()=>{this.closeCreateUserModal()}),document.getElementById("createUserModal").addEventListener("click",t=>{t.target.id==="createUserModal"&&this.closeCreateUserModal()}),document.getElementById("createUserForm").addEventListener("submit",t=>{t.preventDefault(),this.handleCreateUser()})}loadUserData(t){const s=t.email||"User",e=`${t.first_name||""} ${t.last_name||""}`.trim()||s.split("@")[0],a=e.substring(0,2).toUpperCase();if(document.getElementById("userName").textContent=e,document.getElementById("userAvatar").textContent=a,(t.role||localStorage.getItem("userRole"))!=="admin"){this.showStatus("Access denied. Admin privileges required.","error"),setTimeout(()=>{window.location.href="/index.html"},2e3);return}}async getAccessToken(){const t=localStorage.getItem("accessToken");return t||(window.location.href="/login.html","")}async loadStats(){try{const t=await this.getAccessToken(),s=await fetch("/api/db/users/stats",{method:"GET",headers:{Authorization:`Bearer ${t}`}});if(!s.ok)throw new Error(`HTTP error! status: ${s.status}`);const e=await s.json();if(e.success){const a=e.stats;document.getElementById("totalUsers").textContent=a.total_users,document.getElementById("activeUsers").textContent=a.active_users,document.getElementById("adminUsers").textContent=a.admin_users,document.getElementById("regularUsers").textContent=a.regular_users}else throw new Error(e.error||"Failed to load stats")}catch(t){console.error("Error loading stats:",t),this.showStatus("Error loading statistics: "+t.message,"error")}}async loadUsers(){try{const t=await this.getAccessToken(),s=await fetch("/api/db/users/get_all",{method:"GET",headers:{Authorization:`Bearer ${t}`}});if(!s.ok)throw new Error(`HTTP error! status: ${s.status}`);const e=await s.json();if(e.success)this.renderUsersTable(e.users);else throw new Error(e.error||"Failed to load users")}catch(t){console.error("Error loading users:",t),this.showStatus("Error loading users: "+t.message,"error")}}renderUsersTable(t){const s=document.getElementById("usersTableBody");if(t.length===0){s.innerHTML=`
                        <tr>
                            <td colspan="6" style="text-align: center; padding: 40px;">
                                No users found
                            </td>
                        </tr>
                    `;return}s.innerHTML=t.map(e=>`
                    <tr>
                        <td>
                            <strong>${e.first_name||""} ${e.last_name||""}</strong>
                            ${!e.first_name&&!e.last_name?"<em>No name</em>":""}
                        </td>
                        <td>${e.email}</td>
                        <td>
                            <span class="role-badge role-${e.role}">
                                ${e.role}
                            </span>
                        </td>
                        <td>
                            <span class="status-badge status-${e.is_active?"active":"inactive"}">
                                ${e.is_active?"Active":"Inactive"}
                            </span>
                        </td>
                        <td>
                            ${e.last_login?new Date(e.last_login).toLocaleDateString():"Never"}
                        </td>
                        <td>
                            ${new Date(e.created_at).toLocaleDateString()}
                        </td>

                    </tr>
                `).join("")}showStatus(t,s="success"){const e=document.createElement("div");e.className=`status ${s}`,e.textContent=t,e.style.position="fixed",e.style.top="20px",e.style.right="20px",e.style.zIndex="10000",e.style.display="block",e.style.minWidth="300px",document.body.appendChild(e),setTimeout(()=>{e.remove()},5e3)}openCreateUserModal(){document.getElementById("createUserModal").style.display="block",document.getElementById("firstName").focus()}closeCreateUserModal(){document.getElementById("createUserModal").style.display="none",document.getElementById("createUserForm").reset()}async handleCreateUser(){try{const t=document.getElementById("createUserForm"),s=new FormData(t),e={first_name:s.get("firstName"),last_name:s.get("lastName"),email:s.get("email"),password:s.get("password"),role:s.get("role")};if(!e.first_name||!e.last_name||!e.email||!e.password||!e.role){this.showStatus("Please fill in all required fields","error");return}const a=document.getElementById("submitBtn"),o=a.textContent;a.disabled=!0,a.textContent="Creating...";const n=await this.getAccessToken(),r=await(await fetch("/api/db/users/create",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${n}`},body:JSON.stringify(e)})).json();r.success?(this.showStatus("User created successfully!","success"),this.closeCreateUserModal(),await this.loadUsers(),await this.loadStats()):this.showStatus(r.error||"Failed to create user","error"),a.disabled=!1,a.textContent=o}catch(t){console.error("Error creating user:",t),this.showStatus("Error creating user: "+t.message,"error");const s=document.getElementById("submitBtn");s.disabled=!1,s.textContent="Create User"}}async handleLogout(){try{localStorage.removeItem("authenticated"),localStorage.removeItem("userEmail"),localStorage.removeItem("userName"),localStorage.removeItem("accessToken"),window.location.href="/login.html"}catch(t){console.error("Logout failed:",t),window.location.href="/login.html"}}}document.addEventListener("DOMContentLoaded",function(){new i});
